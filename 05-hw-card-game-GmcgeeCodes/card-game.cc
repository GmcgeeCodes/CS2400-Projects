/*
 * File: card-game.cc
 * Author: Gerald McGee
 * Date: 04/2/19
 * Description:  This program was written to simulate a card game. The program takes a triangular number 
 * and divides that number into a random number of piles. It then takes one from each pile and uses those cards to create
 * a new pile until the piles of cards represent a sequence. The piles are represented using an array and multiple
 * functions are used to determine if a number is triangular, if the end of game has been reached and much more.
 *
 */

#include <iostream>
#include <iomanip>
#include <cstdlib>
using namespace std;

//function prototypes
bool isTriangular(int n);
/*
 * This purpose of this function is to determine if a number in triangular or not. It takes an integer 
 * parameter from the main function and returns a bool value depending on if the number
 * is Triangular or not.
*/
bool endGame(const int data[], int count); 
/*
 * The purpose of this function is to determine if the end of game has been reached by checking 
 * the array's sequence. It takes a constant array parameter and and integer parameter which represents
 * the size.
 * 
*/
void sort(int data[], int count);
/*
 * The purpose of this function is to sort the function from highest to lowest. The function takes an array and
 * an integer count in its parameters. It is void so it returns nothing. 
 * 
*/
void printElements(const int data[], int size);
/*
 * The purpose of this function is to simply print the array elements. The function takes in a constant array and the 
 * size of the array in its parameters and returns nothing. 
*/
int maxIndex(const int data[], int startIndex, int endIndex);
/*
 * This function takes in an constant array parameter as well as numbers for the start and end index.
 * The purpose of this function is to find the maxIndex for the sort function so it can place that max in the first 
 * position of the array. It returns an integer which is the max index. 
*/
int search(const int data[],int count, int target);
/*
 * The purpose of this function is to search for the first zero so it can find the new size of the array after 
 * adding a pile and sorting. This function takes a constant array parameter, the size, and a target 
 * parameter.
*/

int main(int argc, char const *argv[]) {  //main

    srand(time(NULL)); 

    int n = 0;

    if (argc == 2){
        n = atoi(argv[1]);

        if (isTriangular(n) != 1){
            cout << "Error: Number is not triangular "<< endl; 
            exit(1); 
        }
    }
     else if (argc == 1) {
        n = 45; 
     }

    else if (argc > 2){
        cout << " Error: too many parameters. "<< endl;
    }


    int pileDeck[500];  // array that will represent the piles of cards  
    int randomDeckNum = 0; // Number generated by the rand() function for the num of cards
    int cardsLeft = n + 1; // The cards between 0 and n 
    int size = 0;  // The variable that will hold the first size of the array


    for (int i = 0; i < 500; ++i){ // for loop to fill the array with its first couple of values

        randomDeckNum = rand() % cardsLeft; 

        if (randomDeckNum == 0){

            int zeroCounter = 0;

            while (zeroCounter < 3){ // Filter out the zeroes from getting into the array where I dont want it.
                randomDeckNum = rand() % cardsLeft; 

                if (randomDeckNum != 0){
                break; 
                }
                ++ zeroCounter;
            }
        }

        if (randomDeckNum != 0){

            pileDeck[i] = randomDeckNum;
            cardsLeft = cardsLeft - randomDeckNum;
            ++size; 
        }
    } 

        sort(pileDeck, size); // first sort
        printElements(pileDeck, size);

        int numberRounds = 0; // Variable to count the number of rounds
        numberRounds++; 

        bool endChecker = endGame(pileDeck,size); // Checking if the game is over before the while loop 
    
          
       while (endChecker == 0)
        {

         for (int i = 0; i < size; ++i){ // Subtract one from eaxh pile size
             pileDeck[i] -= 1;
         }
         pileDeck[size] = size;  // Set the new pileDeck equal to size 

         size++; 

         sort(pileDeck, size);

         size = search(pileDeck,size, 0); // search for the zero 

         printElements(pileDeck, size);

         numberRounds++; // update num of rounds 

         endChecker= endGame(pileDeck,size); // Update the endChecker value 
       }

       cout <<"Number of rounds: "<< numberRounds << endl; // Print the number of rounds 
    
    
    
    return 0;
}// main

bool isTriangular(int n){ // Function to check if the number is triangular 

    if (n == 1){
        return true; 
    }

    int triangularNum = 1;  // The first triangular number 

    int adder = 2; // What im adding to triangular number

    do {
    triangularNum += adder;
    adder ++; 

    } while(triangularNum < n); 

    if (triangularNum == n) // if the triangular number = n then it will return true
    return true; 

    return false; 

}

bool endGame(const int data[], int count){
    int trueCounter = 0; // If the array follows a sequence this will be updated 

    for (int i = 0; i < count-1 ; ++i){

        if (data[i] == data[i+1] + 1){
            trueCounter++;
        }


    }

    if (trueCounter != count - 1){

        return false; 
    }


 return true;
    
}


void sort(int data[], int count){ // Function to sort the array 
    
    for (size_t i = 0; i < count ; ++i){

      int maxIndexLocation = maxIndex(data, i ,count); // the maxIndex from the maxIndex function 

      int temp = data[i];   // swap 
      data[i] = data[maxIndexLocation];
      data[maxIndexLocation] = temp; 

    }  
  
}

void printElements(const int data[], int count){ // Function to print elements 

    for (int i = 0; i < count; ++i){

        if (data[i] != 0){

        cout << data[i] << "  ";

         }
    }
    cout << endl;
}

int maxIndex(const int data[], int startIndex, int endIndex){ // Function to get the maxIndex 

    int maximum = data[startIndex]; // the current max
    int maxIndex = startIndex; // the max index

    for (size_t i = startIndex; i < endIndex ; ++i){

        if (data[i] > maximum){

            maximum = data[i];
            maxIndex = i;
        }

    }
    return maxIndex;
}
int search (const int data[],int count, int target){ // Function to search for zero 
    for (size_t i = 0; i < count + 1; i++){

        if (target == data[i])
            return i;
    }

    return -1;
}


    



